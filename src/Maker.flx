header Standard_Failure_hxx = '#include <Standard_Failure.hxx>';
header Standard_ErrorHandler_hxx = '#include <Standard_ErrorHandler.hxx>';

body static_store_bdy = """
  template< typename U, typename T> T* static_store() { static T t; return &t; }
""";

gen static_store[U,T]: 1 -> &T = "static_store<?1,?2>();" requires static_store_bdy;

fun createSharedPtr[T]: T -> shared_ptr[T] = "shared_ptr<?1>(new (?1)($1))";

class Maker
{

  type exception = "Standard_Failure" requires Standard_Failure_hxx,Standard_ErrorHandler_hxx;
  instance Str[exception] { fun str(e:exception) = { return "Standard_Failure";};} 


  class Interface[M]
  {
    virtual type E;
    virtual fun IsDone[I] : I -> bool;
    virtual fun Error[I] : I -> E;
    virtual fun Value[I,O] : I -> O;
  }

  private chip factory [M,I,O]
    connector io
      pin inp: %<I
      pin out: %>shared_ptr[O]  // shared_ptr is used to wrap the objects with might have
                                // their own memory management DEFINE_STANDARD_ALLOC
				// is not necessary for Handles, right now these are wrapped too.
  {
    //open Interface[M]; 
    var v = read io.inp;
    if Interface[M]::IsDone( v) do write (io.out, createSharedPtr[O]( Interface[M]::Value[I,O]( v))); 
    else println$ "Error: " + str( Interface[M]::Error[I]( v)); done
  }
 
  private struct Res[I,O] {
    ri:ischannel[shared_ptr[I]];
    wi:oschannel[shared_ptr[I]];
    ro:ischannel[shared_ptr[O]];
    wo:oschannel[shared_ptr[O]];
  };

  proc init[M,I,O] () {
    typedef Is = shared_ptr[I];
    typedef Os = shared_ptr[O];
    var x: &Res[I,O] = #static_store[I,Res[I,O]];
    x.ri, x.wi <- #mk_ioschannel_pair[Is];
    x.ro, x.wo <- #mk_ioschannel_pair[Os];     
    device f = factory[M,Is,O];
    circuit
      wire x*.ri to f.inp
      wire x*.wo to f.out
    endcircuit
  }
  
  gen maker[I,O,A] (a:A) : O 
  {
    typedef Is = shared_ptr[I];
    var x: &Res[I,O] = #static_store[I,Res[I,O]];
    var i:Is;
    try
      cstmt 'OCC_CATCH_SIGNALS';
      i = shared_ptr( cnew[I,A] ( a));
      write( x*.wi, i);
      return deref( read x*.ro);
    catch
      e:exception => cstmt 'std::cout << "error:" << e.GetMessageString() << std::endl';
      noreturn cstmt "exit(0);";
    endtry
  }

}